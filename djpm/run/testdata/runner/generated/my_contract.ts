// this code is generated by aspect dev tool.
import { AspTransaction } from "../aspect/v1/AspTransaction";
import { Msg } from "../lib/msg";
import { createUint8Arrary } from "../lib/lib";

export class MyContract {
    public deposit(name: string, msg: Msg): AspTransaction {
        // TODO, this should be encoded by the contract method "MyContract.deposit" and argument name = "Salary"
        let str = "ea08d2dc000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000082253616c61727922000000000000000000000000000000000000000000000000"
        let input = createUint8Arrary(str);

        let tx = new AspTransaction();
        tx.chainId = "";
        tx.nonce = 0;
        tx.gasTipCap = msg.maxPriorityFeePerGas;
        tx.gasFeeCap = msg.maxFeePerGas;
        tx.gasLimit = 0;
        tx.gasPrice = 0;
        tx.to = this._address;
        tx.value = msg.value;
        tx.input = input;
        tx.accessList = [];
        tx.blockHash = new Uint8Array(0);
        tx.blockNumber = 0;
        tx.from = msg.broker;
        tx.hash = new Uint8Array(0);
        tx.transactionIndex = 0;
        tx.type = 0;
        tx.v = new Uint8Array(0);
        tx.r = new Uint8Array(0);
        tx.s = new Uint8Array(0);
        return tx;
    }

    constructor(address: string = "") {
        this._address = address;
    }

    _address: string;
}

function createTypedArray<TArray, T>(
    buffer: ArrayBuffer,
    byteOffset: usize = 0,
    length: i32 = 0
): TArray {

    if (!length) length = buffer.byteLength / sizeof<T>();
    if (buffer.byteLength - byteOffset > length * sizeof<T>()) {
        throw new RangeError("Invalid typed array length");
    }
    var arr = heap.alloc(offsetof<TArray>(), idof<TArray>());
    store<ArrayBuffer>(arr, buffer, 0); // buffer
    store<ArrayBuffer>(arr, changetype<usize>(buffer) + byteOffset, sizeof<usize>()); // dataStart
    store<i32>(arr, length * sizeof<T>(), sizeof<usize>() * 2); // dataLength
    return changetype<TArray>(arr);
}