// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v3.21.12

import { Writer, Reader } from "as-proto/assembly";

export class AspectOutput {
  static encode(message: AspectOutput, writer: Writer): void {
    writer.uint32(8);
    writer.bool(message.success);

    const context = message.context;
    if (context !== null) {
      const contextKeys = context.keys();
      for (let i: i32 = 0; i < contextKeys.length; ++i) {
        const contextKey = contextKeys[i];
        writer.uint32(18);
        writer.fork();
        writer.uint32(10);
        writer.string(contextKey);
        writer.uint32(18);
        writer.string(context.get(contextKey));
        writer.ldelim();
      }
    }
  }

  static decode(reader: Reader, length: i32): AspectOutput {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new AspectOutput();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.success = reader.bool();
          break;

        case 2:
          let contextKey: string = "";
          let contextValue: string = "";
          let contextHasKey: bool = false;
          let contextHasValue: bool = false;
          for (
            const end: usize = reader.ptr + reader.uint32();
            reader.ptr < end;

          ) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                contextKey = reader.string();
                contextHasKey = true;
                break;

              case 2:
                contextValue = reader.string();
                contextHasValue = true;
                break;

              default:
                reader.skipType(tag & 7);
                break;
            }
            if (message.context === null) {
              message.context = new Map<string, string>();
            }
            const context = message.context;
            if (context !== null && contextHasKey && contextHasValue) {
              context.set(contextKey, contextValue);
            }
          }
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  success: bool;
  context: Map<string, string>;

  constructor(success: bool = false, context: Map<string, string> = new Map()) {
    this.success = success;
    this.context = context;
  }
}
