// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: scheduler/v1/schedule_message.proto

package types

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ScheduleStatus int32

const (
	ScheduleStatus_Close ScheduleStatus = 0
	ScheduleStatus_Open  ScheduleStatus = 1
)

// Enum value maps for ScheduleStatus.
var (
	ScheduleStatus_name = map[int32]string{
		0: "Close",
		1: "Open",
	}
	ScheduleStatus_value = map[string]int32{
		"Close": 0,
		"Open":  1,
	}
)

func (x ScheduleStatus) Enum() *ScheduleStatus {
	p := new(ScheduleStatus)
	*p = x
	return p
}

func (x ScheduleStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScheduleStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_scheduler_v1_schedule_message_proto_enumTypes[0].Descriptor()
}

func (ScheduleStatus) Type() protoreflect.EnumType {
	return &file_scheduler_v1_schedule_message_proto_enumTypes[0]
}

func (x ScheduleStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScheduleStatus.Descriptor instead.
func (ScheduleStatus) EnumDescriptor() ([]byte, []int) {
	return file_scheduler_v1_schedule_message_proto_rawDescGZIP(), []int{0}
}

type ScheduleTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schedule    *Schedule `protobuf:"bytes,1,opt,name=schedule,proto3" json:"schedule,omitempty"`
	BlockHeight int64     `protobuf:"varint,2,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	// eth tx hash
	TxHash string `protobuf:"bytes,3,opt,name=txHash,proto3" json:"txHash,omitempty"`
	// nonce
	TxNonce uint64 `protobuf:"varint,4,opt,name=txNonce,proto3" json:"txNonce,omitempty"`
	// cosmos sdk tx
	SdkTx []byte `protobuf:"bytes,5,opt,name=sdkTx,proto3" json:"sdkTx,omitempty"`
}

func (x *ScheduleTask) Reset() {
	*x = ScheduleTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_v1_schedule_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleTask) ProtoMessage() {}

func (x *ScheduleTask) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_v1_schedule_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleTask.ProtoReflect.Descriptor instead.
func (*ScheduleTask) Descriptor() ([]byte, []int) {
	return file_scheduler_v1_schedule_message_proto_rawDescGZIP(), []int{0}
}

func (x *ScheduleTask) GetSchedule() *Schedule {
	if x != nil {
		return x.Schedule
	}
	return nil
}

func (x *ScheduleTask) GetBlockHeight() int64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *ScheduleTask) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *ScheduleTask) GetTxNonce() uint64 {
	if x != nil {
		return x.TxNonce
	}
	return 0
}

func (x *ScheduleTask) GetSdkTx() []byte {
	if x != nil {
		return x.SdkTx
	}
	return nil
}

type Schedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           *ScheduleId `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CreateHeight uint64      `protobuf:"varint,2,opt,name=createHeight,proto3" json:"createHeight,omitempty"`
	// 0 close, 1 start
	Status ScheduleStatus `protobuf:"varint,3,opt,name=status,proto3,enum=scheduler.v1.ScheduleStatus" json:"status,omitempty"`
	// 0 periodic, 1 adhoc
	Tx          *AspTransaction `protobuf:"bytes,4,opt,name=tx,proto3" json:"tx,omitempty"`
	StartBlock  uint64          `protobuf:"varint,5,opt,name=startBlock,proto3" json:"startBlock,omitempty"`
	EveryNBlock uint64          `protobuf:"varint,6,opt,name=everyNBlock,proto3" json:"everyNBlock,omitempty"`
	MaxRetry    uint64          `protobuf:"varint,7,opt,name=maxRetry,proto3" json:"maxRetry,omitempty"`
	Count       uint64          `protobuf:"varint,8,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *Schedule) Reset() {
	*x = Schedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_v1_schedule_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schedule) ProtoMessage() {}

func (x *Schedule) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_v1_schedule_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schedule.ProtoReflect.Descriptor instead.
func (*Schedule) Descriptor() ([]byte, []int) {
	return file_scheduler_v1_schedule_message_proto_rawDescGZIP(), []int{1}
}

func (x *Schedule) GetId() *ScheduleId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Schedule) GetCreateHeight() uint64 {
	if x != nil {
		return x.CreateHeight
	}
	return 0
}

func (x *Schedule) GetStatus() ScheduleStatus {
	if x != nil {
		return x.Status
	}
	return ScheduleStatus_Close
}

func (x *Schedule) GetTx() *AspTransaction {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *Schedule) GetStartBlock() uint64 {
	if x != nil {
		return x.StartBlock
	}
	return 0
}

func (x *Schedule) GetEveryNBlock() uint64 {
	if x != nil {
		return x.EveryNBlock
	}
	return 0
}

func (x *Schedule) GetMaxRetry() uint64 {
	if x != nil {
		return x.MaxRetry
	}
	return 0
}

func (x *Schedule) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ScheduleId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleName string `protobuf:"bytes,1,opt,name=scheduleName,proto3" json:"scheduleName,omitempty"`
	AspectId     string `protobuf:"bytes,2,opt,name=aspectId,proto3" json:"aspectId,omitempty"`
}

func (x *ScheduleId) Reset() {
	*x = ScheduleId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_v1_schedule_message_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleId) ProtoMessage() {}

func (x *ScheduleId) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_v1_schedule_message_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleId.ProtoReflect.Descriptor instead.
func (*ScheduleId) Descriptor() ([]byte, []int) {
	return file_scheduler_v1_schedule_message_proto_rawDescGZIP(), []int{2}
}

func (x *ScheduleId) GetScheduleName() string {
	if x != nil {
		return x.ScheduleName
	}
	return ""
}

func (x *ScheduleId) GetAspectId() string {
	if x != nil {
		return x.AspectId
	}
	return ""
}

type PeriodicType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartBlock   uint64 `protobuf:"varint,1,opt,name=startBlock,proto3" json:"startBlock,omitempty"`
	EveryNBlocks uint64 `protobuf:"varint,2,opt,name=everyNBlocks,proto3" json:"everyNBlocks,omitempty"`
	MaxRetry     uint64 `protobuf:"varint,3,opt,name=maxRetry,proto3" json:"maxRetry,omitempty"`
	Count        uint64 `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *PeriodicType) Reset() {
	*x = PeriodicType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_v1_schedule_message_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeriodicType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeriodicType) ProtoMessage() {}

func (x *PeriodicType) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_v1_schedule_message_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeriodicType.ProtoReflect.Descriptor instead.
func (*PeriodicType) Descriptor() ([]byte, []int) {
	return file_scheduler_v1_schedule_message_proto_rawDescGZIP(), []int{3}
}

func (x *PeriodicType) GetStartBlock() uint64 {
	if x != nil {
		return x.StartBlock
	}
	return 0
}

func (x *PeriodicType) GetEveryNBlocks() uint64 {
	if x != nil {
		return x.EveryNBlocks
	}
	return 0
}

func (x *PeriodicType) GetMaxRetry() uint64 {
	if x != nil {
		return x.MaxRetry
	}
	return 0
}

func (x *PeriodicType) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type AdhocType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NextNBlocks uint64 `protobuf:"varint,1,opt,name=nextNBlocks,proto3" json:"nextNBlocks,omitempty"`
	MaxRetry    uint64 `protobuf:"varint,2,opt,name=maxRetry,proto3" json:"maxRetry,omitempty"`
}

func (x *AdhocType) Reset() {
	*x = AdhocType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_v1_schedule_message_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdhocType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdhocType) ProtoMessage() {}

func (x *AdhocType) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_v1_schedule_message_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdhocType.ProtoReflect.Descriptor instead.
func (*AdhocType) Descriptor() ([]byte, []int) {
	return file_scheduler_v1_schedule_message_proto_rawDescGZIP(), []int{4}
}

func (x *AdhocType) GetNextNBlocks() uint64 {
	if x != nil {
		return x.NextNBlocks
	}
	return 0
}

func (x *AdhocType) GetMaxRetry() uint64 {
	if x != nil {
		return x.MaxRetry
	}
	return 0
}

type TaskResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfirmTxs []*TaskTx `protobuf:"bytes,1,rep,name=confirmTxs,proto3" json:"confirmTxs,omitempty"`
	Count      uint64    `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *TaskResult) Reset() {
	*x = TaskResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_v1_schedule_message_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskResult) ProtoMessage() {}

func (x *TaskResult) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_v1_schedule_message_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskResult.ProtoReflect.Descriptor instead.
func (*TaskResult) Descriptor() ([]byte, []int) {
	return file_scheduler_v1_schedule_message_proto_rawDescGZIP(), []int{5}
}

func (x *TaskResult) GetConfirmTxs() []*TaskTx {
	if x != nil {
		return x.ConfirmTxs
	}
	return nil
}

func (x *TaskResult) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type TaskTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHeight int64  `protobuf:"varint,1,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	TxHash      string `protobuf:"bytes,2,opt,name=txHash,proto3" json:"txHash,omitempty"`
}

func (x *TaskTx) Reset() {
	*x = TaskTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_v1_schedule_message_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskTx) ProtoMessage() {}

func (x *TaskTx) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_v1_schedule_message_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskTx.ProtoReflect.Descriptor instead.
func (*TaskTx) Descriptor() ([]byte, []int) {
	return file_scheduler_v1_schedule_message_proto_rawDescGZIP(), []int{6}
}

func (x *TaskTx) GetBlockHeight() int64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *TaskTx) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

type TryTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NeedRetry bool      `protobuf:"varint,1,opt,name=needRetry,proto3" json:"needRetry,omitempty"`
	TaskTxs   []*TaskTx `protobuf:"bytes,2,rep,name=taskTxs,proto3" json:"taskTxs,omitempty"`
}

func (x *TryTask) Reset() {
	*x = TryTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_v1_schedule_message_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TryTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TryTask) ProtoMessage() {}

func (x *TryTask) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_v1_schedule_message_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TryTask.ProtoReflect.Descriptor instead.
func (*TryTask) Descriptor() ([]byte, []int) {
	return file_scheduler_v1_schedule_message_proto_rawDescGZIP(), []int{7}
}

func (x *TryTask) GetNeedRetry() bool {
	if x != nil {
		return x.NeedRetry
	}
	return false
}

func (x *TryTask) GetTaskTxs() []*TaskTx {
	if x != nil {
		return x.TaskTxs
	}
	return nil
}

var File_scheduler_v1_schedule_message_proto protoreflect.FileDescriptor

var file_scheduler_v1_schedule_message_proto_rawDesc = []byte{
	0x0a, 0x23, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x61, 0x73, 0x70, 0x65, 0x63, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x68,
	0x6f, 0x73, 0x74, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xac, 0x01, 0x0a, 0x0c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x32, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52,
	0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74,
	0x78, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x78, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x78, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x64, 0x6b, 0x54, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x73, 0x64,
	0x6b, 0x54, 0x78, 0x22, 0xad, 0x02, 0x0a, 0x08, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x12, 0x28, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x34,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x61, 0x73, 0x70, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x70,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x02, 0x74, 0x78, 0x12,
	0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12,
	0x20, 0x0a, 0x0b, 0x65, 0x76, 0x65, 0x72, 0x79, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x65, 0x76, 0x65, 0x72, 0x79, 0x4e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x4c, 0x0a, 0x0a, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x73, 0x70, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x73, 0x70, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x22, 0x84, 0x01, 0x0a, 0x0c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x76, 0x65, 0x72, 0x79, 0x4e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x65, 0x76, 0x65, 0x72, 0x79, 0x4e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x74,
	0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x74,
	0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x49, 0x0a, 0x09, 0x41, 0x64, 0x68, 0x6f,
	0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x4e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6e, 0x65, 0x78, 0x74,
	0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x52, 0x65,
	0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x52, 0x65,
	0x74, 0x72, 0x79, 0x22, 0x58, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x34, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x54, 0x78, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x78, 0x52, 0x0a, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x54, 0x78, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x42, 0x0a,
	0x06, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x78, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x78, 0x48,
	0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73,
	0x68, 0x22, 0x57, 0x0a, 0x07, 0x54, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x1c, 0x0a, 0x09,
	0x6e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x6e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x74, 0x72, 0x79, 0x12, 0x2e, 0x0a, 0x07, 0x74, 0x61,
	0x73, 0x6b, 0x54, 0x78, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x54,
	0x78, 0x52, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x78, 0x73, 0x2a, 0x25, 0x0a, 0x0e, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x09, 0x0a, 0x05,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4f, 0x70, 0x65, 0x6e, 0x10,
	0x01, 0x42, 0xa4, 0x01, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x42, 0x14, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x29,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x72, 0x74, 0x65, 0x6c,
	0x61, 0x2d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x61, 0x72, 0x74, 0x65, 0x6c, 0x61,
	0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0xa2, 0x02, 0x03, 0x53, 0x58, 0x58, 0xaa,
	0x02, 0x0c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x56, 0x31, 0xca, 0x02,
	0x0c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x18,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0d, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_scheduler_v1_schedule_message_proto_rawDescOnce sync.Once
	file_scheduler_v1_schedule_message_proto_rawDescData = file_scheduler_v1_schedule_message_proto_rawDesc
)

func file_scheduler_v1_schedule_message_proto_rawDescGZIP() []byte {
	file_scheduler_v1_schedule_message_proto_rawDescOnce.Do(func() {
		file_scheduler_v1_schedule_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_scheduler_v1_schedule_message_proto_rawDescData)
	})
	return file_scheduler_v1_schedule_message_proto_rawDescData
}

var file_scheduler_v1_schedule_message_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_scheduler_v1_schedule_message_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_scheduler_v1_schedule_message_proto_goTypes = []interface{}{
	(ScheduleStatus)(0),    // 0: scheduler.v1.ScheduleStatus
	(*ScheduleTask)(nil),   // 1: scheduler.v1.ScheduleTask
	(*Schedule)(nil),       // 2: scheduler.v1.Schedule
	(*ScheduleId)(nil),     // 3: scheduler.v1.ScheduleId
	(*PeriodicType)(nil),   // 4: scheduler.v1.PeriodicType
	(*AdhocType)(nil),      // 5: scheduler.v1.AdhocType
	(*TaskResult)(nil),     // 6: scheduler.v1.TaskResult
	(*TaskTx)(nil),         // 7: scheduler.v1.TaskTx
	(*TryTask)(nil),        // 8: scheduler.v1.TryTask
	(*AspTransaction)(nil), // 9: aspect.v1.AspTransaction
}
var file_scheduler_v1_schedule_message_proto_depIdxs = []int32{
	2, // 0: scheduler.v1.ScheduleTask.schedule:type_name -> scheduler.v1.Schedule
	3, // 1: scheduler.v1.Schedule.id:type_name -> scheduler.v1.ScheduleId
	0, // 2: scheduler.v1.Schedule.status:type_name -> scheduler.v1.ScheduleStatus
	9, // 3: scheduler.v1.Schedule.tx:type_name -> aspect.v1.AspTransaction
	7, // 4: scheduler.v1.TaskResult.confirmTxs:type_name -> scheduler.v1.TaskTx
	7, // 5: scheduler.v1.TryTask.taskTxs:type_name -> scheduler.v1.TaskTx
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_scheduler_v1_schedule_message_proto_init() }
func file_scheduler_v1_schedule_message_proto_init() {
	if File_scheduler_v1_schedule_message_proto != nil {
		return
	}
	file_aspect_v1_hostapi_message_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_scheduler_v1_schedule_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_v1_schedule_message_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Schedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_v1_schedule_message_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_v1_schedule_message_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeriodicType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_v1_schedule_message_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdhocType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_v1_schedule_message_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_v1_schedule_message_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_v1_schedule_message_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TryTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_scheduler_v1_schedule_message_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_scheduler_v1_schedule_message_proto_goTypes,
		DependencyIndexes: file_scheduler_v1_schedule_message_proto_depIdxs,
		EnumInfos:         file_scheduler_v1_schedule_message_proto_enumTypes,
		MessageInfos:      file_scheduler_v1_schedule_message_proto_msgTypes,
	}.Build()
	File_scheduler_v1_schedule_message_proto = out.File
	file_scheduler_v1_schedule_message_proto_rawDesc = nil
	file_scheduler_v1_schedule_message_proto_goTypes = nil
	file_scheduler_v1_schedule_message_proto_depIdxs = nil
}
