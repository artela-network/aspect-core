syntax = "proto3";

package aspect.v2;

option go_package = "github.com/artela-network/aspect-core/types";

// evm api types
message StaticCallRequest {
    bytes from = 1;
    bytes to = 2;
    bytes data = 3;
    uint64 gas = 4;
}

message StaticCallResult {
    bytes ret = 1;
    string vm_error = 2;
    uint64 gas_left = 3;
}

message JitInherentRequest {
    bytes sender = 1;
    bytes nonce = 2;
    bytes init_code = 3;
    bytes call_data = 4;
    bytes call_gas_limit = 5;
    bytes verification_gas_limit = 6;
    bytes max_fee_per_gas = 7;
    bytes max_priority_fee_per_gas = 8;
    bytes paymaster_and_data = 9;
}

message JitInherentResponse {
    repeated bytes jit_inherent_hashes = 1;
    bytes tx_hash = 2;
    bool success = 3;
    bytes ret = 4;
    uint64 leftover_gas = 5;
    string error_msg = 6;
}

// runtime context types
message EthLogs {
    repeated EthLog logs = 1;
}

message EthLog {
    // address of the contract that generated the event
    bytes address = 1;
    // topics is a list of topics provided by the contract.
    repeated bytes topics = 2;
    // data which is supplied by the contract, usually ABI-encoded
    bytes data = 3;

    uint64 index = 4;
}

message EthReceipt {
    uint64 status = 1;
    uint64 cumulative_gas_used = 2;
    bytes logs_bloom = 3;
    bytes effective_gas_price = 4;
    repeated EthLog logs = 5;
}

message EthAccessList {
    repeated EthAccessTuple access_list = 1;
}

message EthAccessTuple {
    bytes address = 1;
    repeated bytes storage_keys = 2;
}

// trace api types
message StateChangeQuery {
    string account = 1;
    string state_var_name = 2;
    repeated bytes indices = 3;
}

message CallTreeQuery {
    int64 call_idx = 1;
}

message EthCallMessage {
    bytes from = 1;
    bytes to = 2;
    // data is the data payload bytes of the transaction.
    bytes data = 3;
    uint64 gas = 4;
    bytes value = 5;
    bytes ret = 6;
    uint64 gas_used = 7;
    string error = 8;
    uint64 index = 9;
    int64 parent_index = 10;
    repeated uint64 children_indices = 11;
}

message EthStateChange {
    string account = 1; // hex string of account
    bytes value = 2;
    uint64 call_index = 3;
}

message EthStateChangeIndices {
    repeated bytes indices = 1;
}

message EthStateChanges {
    repeated EthStateChange all = 1;
}

message EthCallTree {
    map<uint64, EthCallMessage> calls = 1;
}

// basic types
message StringData {
    string data = 1;
}

message StringArrayData {
    repeated string data = 1;
}

message UintData {
    uint64 data = 1;
}

message IntData {
    int64 data = 1;
}

message IntArrayData {
    repeated int64 data = 1;
}

message BoolData {
    bool data = 1;
}

message BytesArrayData {
    repeated bytes data = 1;
}

message BytesData {
    bytes data = 1;
}
