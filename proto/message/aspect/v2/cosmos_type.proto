syntax = "proto3";

package aspect.v2;

option go_package = "github.com/artela-network/aspect-core/types";

message GasMeter {
    uint64 gas_consumed = 1;
    uint64 gas_consumed_to_limit = 2;
    uint64 gas_remaining = 3;
    uint64 limit = 4;
}

message DecCoin {
    string denom = 1;
    string amount = 2;
}

message MinGasPrice {
    repeated DecCoin coins = 1;
}

message LastCommitInfo {
    int32 round = 1;
    repeated VoteInfo votes = 2;
}

// Validator
message Validator {
    bytes address = 1;  // The first 20 bytes of SHA256(public key)
  // PubKey pub_key = 2 [(gogoproto.nullable)=false];
    int64 power = 3;  // The voting power
}

// VoteInfo
message VoteInfo {
    Validator validator = 1;
    bool signed_last_block = 2;
}

enum EvidenceType {
    UNKNOWN = 0;
    DUPLICATE_VOTE = 1;
    LIGHT_CLIENT_ATTACK = 2;
}

message EvidenceList {
    repeated Evidence evidences = 1;
}

message Evidence {
    EvidenceType type = 1;
    // The offending validator
    Validator validator = 2;
    // The height when the offense occurred
    int64 height = 3;
    // The corresponding time where the offense occurred
    int64 time = 4;
    // Total voting power of the validator set in case the ABCI application does
    // not store historical validators.
    // https://github.com/tendermint/tendermint/issues/4581
    int64 total_voting_power = 5;
}

message PartSetHeader {
    uint32 total = 1;
    bytes hash = 2;
}

// BlockID
message BlockID {
    bytes hash = 1;
    PartSetHeader part_set_header = 2;
}

message BlockParams {
    int64 max_bytes = 1;
    // Note: must be greater or equal to -1
    int64 max_gas = 2;
}

message Version {
    uint32 appVersion = 1;
}

message ConsParams {
    BlockParams block = 1;
    EvidenceParams evidence = 2;
    ValidatorParams validator = 3;
    VersionParams version = 4;
}

// EvidenceParams determine how we handle evidence of malfeasance.
message EvidenceParams {
    // Max age of evidence, in blocks.
    //
    // The basic formula for calculating this is: MaxAgeDuration / {average block
    // time}.
    int64 max_age_num_blocks = 1;
    int64 max_age_duration = 2;
    // This sets the maximum size of total evidence in bytes that can be committed in a single block.
    // and should fall comfortably under the max block bytes.
    // Default is 1048576 or 1MB
    int64 max_bytes = 3;
}

message ValidatorParams {
    repeated string pub_key_types = 1;
}

// VersionParams contains the ABCI application version.
message VersionParams {
    uint64 app_version = 1;
}

message EvmParams {
    string evm_denom = 1;
    // enable_create toggles state transitions that use the vm.Create function
    bool enable_create = 2;
    // enable_call toggles state transitions that use the vm.Call function
    bool enable_call = 3;
    // extra_eips defines the additional EIPs for the vm.Config
    repeated int64 extra_eips = 4;

    bool allow_unprotected_txs = 5;
}

message Clique {
    uint64 period = 1;
    uint64 epoch = 2;
}

message ChainConfig {
    string chainId = 1;
    string homestead_block = 2;
    string dao_fork_block = 3;
    bool dao_fork_support = 4;
    string eip150_block = 5;
    string eip155_block = 6;
    string eip158_block = 7;
    string byzantium_block = 8;
    string constantinople_block = 9;
    string petersburg_block = 10;
    string istanbul_block = 11;
    string muir_glacier_block = 12;
    string berlin_block = 13;
    string london_block = 14;
    string arrow_glacier_block = 15;
    string gray_glacier_block = 16;
    string merge_netsplit_block = 17;
    uint64 shanghai_time = 18;
    uint64 cancun_time = 19;
    uint64 prague_time = 20;
    string terminal_total_difficulty = 21;
    bool terminal_total_difficulty_passed = 22;
    Clique clique = 23;
}

message EnvContent {
    uint64 base_fee = 1;
}

message TxExtProperty {
    map<string, string> property = 1;
}
